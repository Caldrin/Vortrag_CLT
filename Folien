  # die nächsten drei Folien hätte ich so in der Art schon gern drin, aber Du
  # hattest ähnliches in nem früheren commit schon mal entfernt. Man könnte es
  # alternativ auch andersherum machen - "diese riesige Liste cooler Dinge habt
  # ihr verpasst, weil ihr vor 10 Jahren aufgehört habt hinzuschauen", und erst
  # danach mögliche, inzwischen behobene, Ursachen listen

                =======================
* Perl's historische Nische
** C, Awk, Shell
** Whipuptidude, Manipulexity

                =======================
* Web Boom
** dynamische Webseiten
** schlimme CGI scripts
** Marketing suck, echo chamber

                =======================
* das ist alles 10 Jahre her.
* Technik hat sich weiterentwickelt - Perl auch



                Neues in Perl seit 5.10
                =======================
* say, //  - klein aber nützlich
* given/when - endlich ein switch
* smartmatch
** rechts ein numerischer Wert => ==
** rechts ein regex (qr//) => regex match
** rechts ein Hash         => exists
** rechts ein Array        => grep
** rechts ein Object       => wenn überladen
* vernünftiges Perl auf Windows - Strawberry


                Neues in Perl seit 5.12
                =======================
* Releases in jedem Frühling, development releases jeden *Monat*
* extensible Keywords - Devel::Declare in Perl
* komplettester Unicode-Support
** use utf8 -> erlaubt Unicode im Quelltext (schon länger enthalten)

                Neues in Perl seit 5.14
                =======================
* extrem viele performance improvements
* komplettestererer Unicode-Support
** Unicode 6.0, charnames, regexp flags, user-defined case mappings
* viel historischer cruft entfernt
* neue features
** non-destructive substitutions/transliterations
* mehr extensibility

  # roundup. neue features kommen rein; alte schlechte Ideen fliegen raus;
  # Infrastruktur zum schreiben neuer cooler Dinge wird geschaffen;
  # -> evolving language


  # echt? find ich ich nebensächlich
                eigenes Perl
                ============
* local::lib + Distro Perl
* besser - perlbrew
** eigene Perls bauen, switch mit perlbrew switch $version


  # nicht nur der Perl core ist striving, sondern auch das Ökosystem um ihn
  # herum

                CPAN
                ====
* das zentrale Archiv für Perlmodule
** wenn es dort nicht ist, exisiert es nicht (kein Wort zu DarkPAN)
* Es gibt auf CPAN Module für ALLES
* Module in Distributionen (lib/, t/, script/, META.yml, README)
## erstellen mit module-starter
* jeder kann hochladen, dadurch auch weniger gute Module
* CPAN uploads Graph (striving!)
* Reviews, Bugreports, CPAN-Testers lesen
* sehr erfolgreiche und wichtige Module in Core
** manche Chefs erlauben keine nachinstallierten Module, dann nur Core
** Perl ohne CPAN ist wie Auto fahren ohne Gangschaltung
* installieren mit cpan/cpanm
** cpanm == App::cpanminus
*** minimaler, schneller, zeroconf Client


                Testing
                =======
* Testing-*Kultur*
* TAP (Folien von Steffen klauen *g*)
* Test ausführen mit prove
** Wrapper um Perl
* Tests automatisch beim installieren eines Moduls ausgeführt


                Test::*
                =======
* Simpel - Test::More
** is, isnt, like
* fortgeschritten - Bsp. Test::Deeply
** cmp_deeply(\@result, [all, any, bag, subhashof, superhashof]())
* eigene Tests mit Test::Builder bauen
* Test::Kwalitee - Bundle mit Default-Tests


                 Test Unterstüztung
                 ==================
* Unterschiede erkennen - Test:Differences
* Test Coverage - Devel::Cover
* Test::MockModule (Mock::Class, ...)
* Funktionen fürs Testing überschreiben
** Bsp. mkfs
* Test::Fixture::*
** Datenbankschema + Inhalt als YAML beschreiben

                 RegEx
                 =====
* Perl regex in anderen Sprachen, trotzdem noch hinter Perl hinterher
* named Backreferencen
** /(?<name>regex)/
* Look ahead, look behind (kompletteste Regexp)
** (?!negative lookahead), (?=positive lookahead), (?<!negative lookbehind), (?<=positive lookbehind)
* /x erlaubt Whitespace und Kommentare in regexp
* Regexp::Grammars
-> siehe Beispiel

                 Moose
                 =====
* package Name; use Moose
-> jetzt haben wir ein Klasse Name
* subs im Package sind Methoden
* Attribute durch has attribute => (..Eigenschaften..)
* Einfachvererbung - extends $parentname


                  MooseX
                  ======
* Singletons - für Javafreunde ;-)
* Roles - Mehrfachvererbung (aka Mixin)
* Parametervalidierung
** MooseX::Params::Validate - stabil
** MooseX::Methods::Signature - alpa aber megagenial
* Daemonize - Moose-basierte Daemons (start, stop, status, ..)
* Declare - syntaktischer Zucker


                DBIx::Class
                ===========
* SQL::Abstract - wandelt alles in SQL um
* dadurch joins in Datenbank, nicht durch Perl


                Community
                =========
* Perlmonks http://perlmonks.org
** Forum für Fragen
** Dezember 1999, älteste Programmierercommunitywebseite
* http://perl.org
* Zentrale Stelle für Doku, Code, Mailinglisten, ...
* IRC  irc://irc.perl.org
* Events
** Hackathon,
** YAPC

                Deutsche Community
                ==================
* #perlde auf irc.perl.org
* http://perl-community.org
* German Perl Workshop
* auf dem CLT ;-)

                Perl6
                =====
* z.Z. Experimentalstadium
* wird Perl5 nicht ersetzen
** nebenher von Perl5/Perl6 ähnlich C/C++
* viele Ideen nach Perl5 rückportiert/beeinflusst
** Moose
** Perl6::Junctions
